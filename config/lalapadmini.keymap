#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>;

    //<&zip_temp_layer MOUSE_R_LAYER 300>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>;

        //<&zip_temp_layer MOUSE_R_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 32>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>;

    //<&zip_temp_layer MOUSE_L_LAYER 300>;

    lowspeedmode {
        layers = <TERTIARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>;

        //<&zip_temp_layer MOUSE_L_LAYER 300>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 32>;
    };
};

&mt { quick-tap-ms = <200>; };

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <370>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <0>;
            bindings = <&kp>, <&kp>;
        };

        tap_dance_layer_1and2: tap_dance_layer_1and2 {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mo12";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lang1 {
            bindings = <&kp LANG1>;
            key-positions = <16 17>;
        };

        lang2 {
            bindings = <&kp LANG2>;
            key-positions = <12 13>;
        };
    };

    macros {
        MACRO_LTAP: MACRO_LTAP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>;
            label = "MACRO_LTAP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_down_up>, <&scroll_up_down>;

            bindings = <
&kp Q                &kp W              &kp E            &kp R            &kp T      &kp Y          &kp U                 &kp I                &kp O                   &kp P
&kp A                &kp S              &kp D            &kp F            &kp G      &kp H          &kp J                 &kp K                &kp L                   &kp MINUS
&mt2 LEFT_CONTROL Z  &mt2 LEFT_SHIFT X  &mt2 LEFT_ALT C  &mt2 LEFT_GUI V  &kp B      &kp N          &kp M                 &mt2 LEFT_ALT COMMA  &mt2 LEFT_SHIFT PERIOD  &kp LEFT_CONTROL
&mo 1                &mo 2                               &lt 4 TAB        &kp SPACE  &kp BACKSPACE  &mt2 LEFT_GUI RETURN                       &tog 4                  &mo 3
            >;
        };

        SECONDARY_LAYER {
            display-name = "secondary_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&kp INTERNATIONAL_3  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &kp SLASH   &kp N7        &kp N8        &kp N9        &kp MINUS
&kp DOUBLE_QUOTES    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans           &kp ASTRK   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS
&kp SQT              &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans           &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans               &trans                            &trans           &trans           &kp DELETE  &trans                      &kp PERIOD    &trans
            >;
        };

        TERTIARY_LAYER {
            display-name = "tertiary_layer";
            bindings = <
&kp COLON      &kp LS(N7)        &kp LS(N8)        &kp LS(N9)          &kp RIGHT_PARENTHESIS  &kp F11  &kp F12  &trans  &trans  &trans
&kp SEMICOLON  &kp LS(N4)        &kp LS(N5)        &kp LS(NUMBER_6)    &trans                 &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp QUESTION   &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(LEFT_BRACE)  &kp UNDERSCORE         &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&trans         &trans                              &trans              &trans                 &trans   &trans           &trans  &trans
            >;

            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&volume_up_down>, <&volume_up_down>;

            bindings = <
&kp COLON      &kp LS(N7)        &kp LS(N8)        &kp LS(N9)        &kp LS(N0)           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp SEMICOLON  &kp LS(NUMBER_4)  &kp LS(N5)        &kp LS(NUMBER_6)  &kp INTERNATIONAL_3  &trans        &trans        &trans        &trans        &trans
&kp QUESTION   &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp UNDERSCORE       &trans        &trans        &trans        &trans        &trans
&trans         &trans                              &trans            &trans               &trans        &trans                      &trans        &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&kp ESCAPE        &trans          &trans        &trans        &trans  &kp LA(LC(ESCAPE))  &mkp MB4  &mkp MB3      &mkp MB5   &kp LS(LG(RIGHT))
&trans            &trans          &trans        &trans        &trans  &kp PAGE_UP         &mkp MB1  &kp UP_ARROW  &mkp MB2   &kp HOME
&kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_GUI  &trans  &kp PAGE_DOWN       &kp LEFT  &kp DOWN      &kp RIGHT  &kp END
&trans            &trans                        &trans        &trans  &kp DELETE          &trans                  &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans       &mkp MCLK  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&mo 7   &MACRO_LTAP  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &mkp MB4     &trans     &mkp MB5   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                  &trans     &trans  &trans  &trans          &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        System_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
